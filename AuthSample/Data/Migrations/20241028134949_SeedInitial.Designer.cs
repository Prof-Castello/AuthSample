// <auto-generated />
using System;
using AuthSample.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuthSample.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241028134949_SeedInitial")]
    partial class SeedInitial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "74a1ec51-6205-4008-a216-81127cd4675c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "b4063abd-8f4b-4c8b-b16e-ec631aa2e72d",
                            Name = "TI",
                            NormalizedName = "TI"
                        },
                        new
                        {
                            Id = "e995af3d-d1cf-47a0-901c-341739ce9a99",
                            Name = "RH",
                            NormalizedName = "RH"
                        },
                        new
                        {
                            Id = "5c528ec5-18fc-4aa3-a9d7-9eae13164903",
                            Name = "Financeiro",
                            NormalizedName = "FINANCEIRO"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "51de14a9-26cc-443d-8691-c14ec21a9d6a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "15e1bf69-563f-4d22-9c1c-ccf03220808f",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKidl7cjhU7NORAgZIQN41oyeWj5pCeKPPXo+pbibl2lQsCnParPRccMiTr3jtvTOg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "56f6d2f2-c46f-4c05-b328-82f0c1785bdf",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "2d5bc841-6ea1-4ae1-bb1e-eabe95be9c07",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8fb50471-2ee7-433d-adb0-ec182e81f629",
                            Email = "ti@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TI@EXAMPLE.COM",
                            NormalizedUserName = "TI@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENUNZpoQzmR4kor4mPwOgnA60mu+oelwyOct86gEde2yyhZiIRQ0ZBCFE1CYheAo7g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3c48346a-3d16-47c8-a914-5700cf29615b",
                            TwoFactorEnabled = false,
                            UserName = "ti@example.com"
                        },
                        new
                        {
                            Id = "20a7904e-d2f1-4687-baea-f0d05f46ce2f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1e48a583-cb13-456b-abf4-6cb18bd842c2",
                            Email = "rh@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "RH@EXAMPLE.COM",
                            NormalizedUserName = "RH@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIiudnMmPCys+0eaXJvJYT69p3BQfW8kNRd7ntF9l9NDjjZqJ8hHanb9JT8pjyv/yQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c41f062c-083d-409e-bdac-d0680091265b",
                            TwoFactorEnabled = false,
                            UserName = "rh@example.com"
                        },
                        new
                        {
                            Id = "215aceec-c0bf-47ee-ab49-2f1b611a2f1e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9c45fcfd-524b-4bcc-9914-ba3337d386dc",
                            Email = "financeiro@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FINANCEIRO@EXAMPLE.COM",
                            NormalizedUserName = "FINANCEIRO@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEC3/WBRvgvnM7R2hJcxbam6pEysJxBBxEJBNOXhLSEsOD3LeYnB3kO0XKMN4HsCuwg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6af4a568-3c8b-43bf-88b8-30a73a148c11",
                            TwoFactorEnabled = false,
                            UserName = "financeiro@example.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "51de14a9-26cc-443d-8691-c14ec21a9d6a",
                            RoleId = "74a1ec51-6205-4008-a216-81127cd4675c"
                        },
                        new
                        {
                            UserId = "2d5bc841-6ea1-4ae1-bb1e-eabe95be9c07",
                            RoleId = "b4063abd-8f4b-4c8b-b16e-ec631aa2e72d"
                        },
                        new
                        {
                            UserId = "20a7904e-d2f1-4687-baea-f0d05f46ce2f",
                            RoleId = "e995af3d-d1cf-47a0-901c-341739ce9a99"
                        },
                        new
                        {
                            UserId = "215aceec-c0bf-47ee-ab49-2f1b611a2f1e",
                            RoleId = "5c528ec5-18fc-4aa3-a9d7-9eae13164903"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
